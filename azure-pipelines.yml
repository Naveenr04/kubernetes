# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
parameters:
- name: ResourceGroupName
  displayName: Resource Group Name (leave blank for default firstlastdomain_dtm)
  type: string
  default: ' '
- name: ProfiseeAdminUserAccount
  displayName: Admin UserAccount (leave blank for default current user email)
  type: string
  default: ' '
- name: ProfiseeVersion
  displayName: Profisee Version
  type: string
  default: profiseeplatform:2021r2.0
  values:
  - profiseeplatform:2021r2.0
  - profiseeplatform:2021r3.preview
  - profiseeplatform:2021r3.mlpreview
- name: UseLetsEncrypt
  displayName: Use Lets Encrypt - No, dev.profisee.com, yes eastus2.cloudapp.azure.com
  type: string
  default: No
  values:
  - No
  - Yes
- name: DNSHostName
  displayName: DNS Host Name (leave blank for default firstlastdomaindtm)
  type: string
  default: ' '
- name: KubernetesVersion
  displayName: Kubernetes Version
  type: string
  default: 1.18.14
- name: KubernetesLinuxNodeSize
  displayName: Kubernetes Linux VM size
  type: string
  default: Standard_B2s
- name: KubernetesWindowsNodeSize
  displayName: Kubernetes Windows VM size
  type: string
  default: Standard_B2ms

variables:
  dtm: $[format('{0:MMddyyyyHHmmss}', pipeline.startTime)]
  email: $[variables['Build.RequestedForEmail']]
  emailclean: $[replace(variables['email'],'@','')]
  emailcleansed: $[replace(variables['emailclean'],'.','')]
  ${{ if eq( parameters.ResourceGroupName, ' ' ) }}: 
    resourceGroupName: '$(emailcleansed)_$(dtm)'
  ${{ if ne( parameters['ResourceGroupName'], ' ' ) }}: 
    resourceGroupName: ${{ replace(parameters.ResourceGroupName,' ','') }}
  ${{ if eq( parameters.ProfiseeAdminUserAccount, ' ' ) }}: 
    adminUserAccount:  $[variables['email']]
  ${{ if ne( parameters['ProfiseeAdminUserAccount'], ' ' ) }}: 
    adminUserAccount: ${{  replace(parameters.ProfiseeAdminUserAccount,' ','') }}
  ${{ if eq( parameters.DNSHostName, ' ' ) }}: 
    dnsHostName: '$(emailcleansed)$(dtm)'
  ${{ if ne( parameters['DNSHostName'], ' ' ) }}: 
    dnsHostName: ${{ replace(parameters.DNSHostName,' ','') }}
  ${{ if eq( parameters.UseLetsEncrypt, 'No' ) }}: 
    dnsDomainName: 'dev.profisee.com'
    dnsUpdate: 'Yes'
  ${{ if ne( parameters['UseLetsEncrypt'], 'No' ) }}: 
    dnsDomainName: 'eastus2.cloudapp.azure.com'
    dnsUpdate: 'No'
trigger: none

pool:
  vmImage: ubuntu-latest

steps:
#- script: echo adminUserAccount=$(adminUserAccount)
#- script: echo resourceGroupName=$(resourceGroupName)
#- script: echo dnsHostName=$(dnsHostName)


- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'ProfiseeAzure'
    subscriptionId: '73814551-37dd-4143-a149-df9c2a2c97b6'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(resourceGroupName)'
    location: 'East US 2'
    templateLocation: 'URL of the file'
    csmFileLink: 'https://raw.githubusercontent.com/profiseedev/kubernetes/master/Azure-ARM/azuredeploy.json'
    csmParametersFileLink: 'https://raw.githubusercontent.com/profiseedev/kubernetes/master/Azure-ARM/azuredeploy.parameters.json'
    deploymentMode: 'Complete'
    overrideParameters: >-
      -ProfiseeAdminUserAccount "$(adminUserAccount)"
      -ProfiseeLicense "$(ProfiseeLicense)"
      -ManagedIdentityName $(ManagedIdentityName)
      -SQLServerName "$(SQLServerName)$(dtm)"
      -SQLServerUser "$(SqlServerUser)"
      -SQLServerPassword "$(SQLServerPassword)"
      -StorageAccountName "$(StorageAccountName)$(dtm)"
      -UseLetsEncrypt "${{ parameters.UseLetsEncrypt }}"
      -UseKeyVault "$(UseKeyVault)"
      -KeyVault "$(KeyVault)"
      -DNSUpdate "$(dnsUpdate)"
      -DNSHostName "$(dnsHostName)"
      -DNSDomainName "$(dnsDomainName)"
      -DNSDomainResourceGroup "$(DNSDomainResourceGroup)"
      -HttpsConfigure "$(HttpsConfigure)"
      -HttpsCertificate "$(HttpsCertificate)"
      -HttpsCertificatePrivateKey "$(HttpsCertificatePrivateKey)"
      -KubernetesLinuxNodeSize "${{ parameters.KubernetesLinuxNodeSize }}"
      -KubernetesWindowsNodeSize "${{ parameters.KubernetesWindowsNodeSize }}"
      -ProfiseeVersion "${{ parameters.ProfiseeVersion }}"
      -KubernetesVersion "${{ parameters.KubernetesVersion }}"
  enabled: true


